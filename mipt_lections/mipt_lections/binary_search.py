"""Бинарный поиск в массиве
Задача найти элемент в массиве и вывести индексы границ его нахождения
(индексы массива, между которыми лежит этот элемнет). Если искомый элемент
меньше минимального числа в массиве, то выводится [-1,0], если больше
максимального то [N-1,N] (N длина массива)
требование: исходный массив отсортирован
Решение: отдельно ищется левая граница, затем отдельно правая.

Например:
>>> a = [3,7,12]
>>> binary_search(a, 3)
[-1, 1]
>>> binary_search(a, 1)
[-1, 0]
>>> binary_search(a, 5)
[0, 1]
>>> binary_search(a, 7)
[0, 2]
>>> binary_search(a, 12)
[1, 3]
>>> binary_search(a, 13)
[2, 3]
"""


# Поиск границ осуществлятся за счет изначального установления границ
# максимальных значений левой и правой границ и затем их "сближения"
# когда левая и правая границы сблизились мы получаем искомую границу:
# отдельно для левой и отдельно для правой
def left_border(a: list, find: int):
    # минимальная левая граница -1, т.е. если искомый элемент меньше самого
    # минимального в массиве
    # максимальная правая граница равна размеру массива (учитывая что
    # индексация начинается с 0, то индекс равный размеру массива будет за
    # пределами массива), для искомых элементов которые больше максимального
    # в массиве
    left = -1
    right = len(a)
    # сближение левой и правой границ осуществляется за счет выбора среднего
    # элемента между левой и правой границей и если искомый элемент меньше или
    # равен середине то правую границу сдвигаем влево (т.е. искомый элемент
    # находится слева от середины поэтому правая граница сдвигается на значение
    # середины)
    while left < right - 1:
        middle = (left + right) // 2
        if find <= a[middle]:
            right = middle
        else:
            left = middle
    return left


# Алгоритм полностью идентичен с поиском левой границы left_border
def right_border(a: list, find: int):
    left = -1
    right = len(a)
    while left < right - 1:
        middle = (left + right) // 2
        if find < a[middle]:
            right = middle
        else:
            left = middle
    return right


def binary_search(a: list, find: int):
    left = left_border(a, find)  # Ищем левую границу
    right = right_border(a, find)  # Ищем правую границу
    return [left, right]


if __name__ == "__main__":
    import doctest

    doctest.testmod(verbose=True)
    a = [1, 2, 2, 2, 3, 3, 4, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7]
    # print(f"a : {len(a)}")
    test_finds = [
        [0, [-1, 0]],
        [1, [-1, 1]],
        [2, [0, 4]],
        [3, [3, 6]],
        [4, [5, 7]],
        [5, [6, 13]],
        [6, [12, 13]],
        [7, [12, 17]],
        [8, [16, 17]],
    ]
